/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.ManageFacultyWorkResp;

import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Faculty.FacultyDirectory;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import info5100.university.example.Persona.Person;
import java.awt.CardLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author noora.
 */
public class ManageFacultyJPanel extends javax.swing.JPanel {

    JPanel CardSequencePanel;
    Department department;
    FacultyProfile selectedFaculty;

    /**
     * Creates new form ManageFacultyJPanel
     */
    public ManageFacultyJPanel(Department dept, JPanel cardPanel) {
        this.department = dept;
        this.CardSequencePanel = cardPanel;
        initComponents();

        tblFaculty.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                int row = tblFaculty.getSelectedRow();
                if (row < 0) {
                    selectedFaculty = null;
                    return;
                }
                Object obj = tblFaculty.getValueAt(row, 0);
                if (obj instanceof FacultyProfile) {
                    selectedFaculty = (FacultyProfile) obj;
                } else {
                    selectedFaculty = null;
                }
            }
        });

        tblFaculty.getColumnModel().getColumn(0).setMinWidth(0);
        tblFaculty.getColumnModel().getColumn(0).setMaxWidth(0);
        tblFaculty.getColumnModel().getColumn(0).setWidth(0);

        refreshTable(department.getFacultyDirectory().getFacultylist());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnSearchbyName = new javax.swing.JButton();
        btnSearchbyDept = new javax.swing.JButton();
        btnSearchbyID = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();
        txtFieldID = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblDept = new javax.swing.JLabel();
        txtFieldName = new javax.swing.JTextField();
        txtFieldDept = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFaculty = new javax.swing.JTable();
        btnAssignCourse = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setLayout(null);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jPanel1.add(btnBack);
        btnBack.setBounds(20, 500, 80, 23);

        lblTitle.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lblTitle.setText("Manage Faculty");
        jPanel1.add(lblTitle);
        lblTitle.setBounds(21, 20, 550, 28);

        btnSearchbyName.setText("Search by Name");
        btnSearchbyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchbyNameActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearchbyName);
        btnSearchbyName.setBounds(60, 70, 150, 23);

        btnSearchbyDept.setText("Search by Dept");
        btnSearchbyDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchbyDeptActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearchbyDept);
        btnSearchbyDept.setBounds(240, 70, 130, 23);

        btnSearchbyID.setText("Search by ID");
        btnSearchbyID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchbyIDActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearchbyID);
        btnSearchbyID.setBounds(400, 70, 120, 23);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete);
        btnDelete.setBounds(240, 450, 78, 23);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        jPanel1.add(btnEdit);
        btnEdit.setBounds(110, 450, 78, 23);

        lblID.setText("ID");
        jPanel1.add(lblID);
        lblID.setBounds(140, 120, 12, 17);
        jPanel1.add(txtFieldID);
        txtFieldID.setBounds(180, 120, 110, 23);

        lblName.setText("Name");
        jPanel1.add(lblName);
        lblName.setBounds(130, 160, 34, 17);

        lblDept.setText("Dept");
        jPanel1.add(lblDept);
        lblDept.setBounds(130, 200, 28, 17);
        jPanel1.add(txtFieldName);
        txtFieldName.setBounds(180, 160, 110, 23);
        jPanel1.add(txtFieldDept);
        txtFieldDept.setBounds(180, 200, 110, 23);

        tblFaculty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Object", "ID", "Name", "Department", "Status", "Email", "Phone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFaculty);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(22, 250, 570, 180);

        btnAssignCourse.setText("Assign Course");
        btnAssignCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignCourseActionPerformed(evt);
            }
        });
        jPanel1.add(btnAssignCourse);
        btnAssignCourse.setBounds(340, 450, 130, 23);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchbyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchbyNameActionPerformed
        // TODO add your handling code here:
        String name = txtFieldName.getText().trim();
        FacultyDirectory fd = department.getFacultyDirectory();

        List<FacultyProfile> results;
        if (name.isEmpty()) {
            results = fd.getFacultylist();
        } else {
            results = fd.searchByName(name);
        }

        refreshTable(results);
        selectedFaculty = null;

    }//GEN-LAST:event_btnSearchbyNameActionPerformed

    private void btnSearchbyDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchbyDeptActionPerformed
        // TODO add your handling code here:
        String dep = txtFieldDept.getText().trim();
        FacultyDirectory fd = department.getFacultyDirectory();

        List<FacultyProfile> results;
        if (dep.isEmpty()) {
            results = fd.getFacultylist();
        } else {
            results = fd.searchByDepartment(dep);
        }

        refreshTable(results);
        selectedFaculty = null;
    }//GEN-LAST:event_btnSearchbyDeptActionPerformed

    private void btnSearchbyIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchbyIDActionPerformed
        // TODO add your handling code here:
        String id = txtFieldID.getText().trim();
        FacultyDirectory fd = department.getFacultyDirectory();

        List<FacultyProfile> results;
        if (id.isEmpty()) {
            results = fd.getFacultylist();
        } else {
            results = fd.searchById(id);
        }

        refreshTable(results);
        selectedFaculty = null;
    }//GEN-LAST:event_btnSearchbyIDActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (selectedFaculty == null) {
            JOptionPane.showMessageDialog(this, "Select a faculty member first.");
            return;
        }

        String personId = selectedFaculty.getPersonId();
        int confirm = JOptionPane.showConfirmDialog(
                this,
                "Delete this faculty member (" + personId + ")?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION
        );
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        FacultyDirectory fd = department.getFacultyDirectory();
        boolean ok = fd.removeFaculty(personId);

        if (!ok) {
            JOptionPane.showMessageDialog(this, "Delete failed.");
            return;
        }

        JOptionPane.showMessageDialog(this, "Faculty deleted.");
        refreshTable(fd.getFacultylist());
        selectedFaculty = null;

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (selectedFaculty == null) {
            JOptionPane.showMessageDialog(this, "Select a faculty member first.");
            return;
        }

        String personId = selectedFaculty.getPersonId();
        if (personId == null) {
            JOptionPane.showMessageDialog(this, "Missing faculty ID.");
            return;
        }

        String newDept = JOptionPane.showInputDialog(
                this,
                "New Department:",
                selectedFaculty.getDepartment()
        );
        if (newDept == null) {
            return;
        }

        String newTitle = JOptionPane.showInputDialog(
                this,
                "New Title:",
                selectedFaculty.getTitle()
        );
        if (newTitle == null) {
            return;
        }

        String newName = JOptionPane.showInputDialog(
                this,
                "New Name:",
                selectedFaculty.getFacultyName()
        );
        if (newName == null) {
            return;
        }

        Person p = selectedFaculty.getPerson();
        String newEmail = JOptionPane.showInputDialog(
                this,
                "New Email:",
                (p != null ? p.getEmail() : "")
        );
        if (newEmail == null) {
            return;
        }

        String newPhone = JOptionPane.showInputDialog(
                this,
                "New Phone:",
                (p != null ? p.getPhone() : "")
        );
        if (newPhone == null) {
            return;
        }

        FacultyDirectory fd = department.getFacultyDirectory();

        boolean okDept = fd.updateFacultyDepartment(personId, newDept.trim());
        boolean okTitle = fd.updateFacultyTitle(personId, newTitle.trim());
        boolean okName = fd.updateFacultyName(personId, newName.trim());
        boolean okContact = fd.updateFacultyContact(personId, newEmail.trim(), newPhone.trim());

        if (!okDept || !okTitle || !okName || !okContact) {
            JOptionPane.showMessageDialog(this,
                    "Update failed. (Possible duplicate email?)");
            return;
        }

        JOptionPane.showMessageDialog(this, "Faculty updated.");
        refreshTable(fd.getFacultylist());
        selectedFaculty = null;
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnAssignCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignCourseActionPerformed
        // TODO add your handling code here:
        if (selectedFaculty == null) {
            JOptionPane.showMessageDialog(this, "Select a faculty member first.");
            return;
        }

        String courseNum = JOptionPane.showInputDialog(
                this,
                "Enter Course Number to assign (e.g. INFO5100):"
        );
        if (courseNum == null || courseNum.trim().isEmpty()) {
            return;
        }

    }//GEN-LAST:event_btnAssignCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignCourse;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearchbyDept;
    private javax.swing.JButton btnSearchbyID;
    private javax.swing.JButton btnSearchbyName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDept;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblFaculty;
    private javax.swing.JTextField txtFieldDept;
    private javax.swing.JTextField txtFieldID;
    private javax.swing.JTextField txtFieldName;
    // End of variables declaration//GEN-END:variables

    private void refreshTable(List<FacultyProfile> facultylist) {
        DefaultTableModel model = (DefaultTableModel) tblFaculty.getModel();
        model.setRowCount(0);

        if (facultylist == null) {
            return;
        }

        for (FacultyProfile fp : facultylist) {
            Person p = fp.getPerson();

            String pid = (p != null ? p.getPersonId() : "");
            String name = fp.getFacultyName();
            String dept = fp.getDepartment();
            String title = fp.getTitle();
            String email = (p != null ? p.getEmail() : "");
            String phone = (p != null ? p.getPhone() : "");

            Object[] row = new Object[]{
                fp, 
                pid,
                name,
                dept,
                title,
                email,
                phone
            };

            model.addRow(row);
        }
    }
}

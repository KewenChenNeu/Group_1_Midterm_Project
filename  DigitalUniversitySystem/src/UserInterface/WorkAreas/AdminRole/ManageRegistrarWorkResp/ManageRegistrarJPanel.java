/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.ManageRegistrarWorkResp;

import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.RegistrarDirectory;
import info5100.university.example.Persona.RegistrarProfile;
import java.awt.CardLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author noora.
 */
public class ManageRegistrarJPanel extends javax.swing.JPanel {

    JPanel CardSequencePanel;
    Department department;
    RegistrarProfile selectedRegistrar;

    /**
     * Creates new form ManageRegistrarJPanel
     */
    public ManageRegistrarJPanel(Department dept, JPanel cardPanel) {
        this.department = dept;
        this.CardSequencePanel = cardPanel;
        initComponents();

        tblRegistrar.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                int row = tblRegistrar.getSelectedRow();
                if (row < 0) {
                    selectedRegistrar = null;
                    return;
                }
                Object obj = tblRegistrar.getValueAt(row, 0);
                if (obj instanceof RegistrarProfile) {
                    selectedRegistrar = (RegistrarProfile) obj;
                } else {
                    selectedRegistrar = null;
                }
            }
        });

        tblRegistrar.getColumnModel().getColumn(0).setMinWidth(0);
        tblRegistrar.getColumnModel().getColumn(0).setMaxWidth(0);
        tblRegistrar.getColumnModel().getColumn(0).setWidth(0);

        refreshTable(department.getRegistrardirectory().getRegistrarList());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnSearchbyID = new javax.swing.JButton();
        btnSearchbyName = new javax.swing.JButton();
        btnSearchbyDept = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();
        txtFieldID = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblDept = new javax.swing.JLabel();
        txtFieldName = new javax.swing.JTextField();
        txtFieldDept = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegistrar = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 153, 153));

        lblTitle.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lblTitle.setText("Manage Registrar");

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSearchbyID.setText("Search by ID");
        btnSearchbyID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchbyIDActionPerformed(evt);
            }
        });

        btnSearchbyName.setText("Search by Name");
        btnSearchbyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchbyNameActionPerformed(evt);
            }
        });

        btnSearchbyDept.setText("Search by Dept");
        btnSearchbyDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchbyDeptActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        lblID.setText("ID");

        lblName.setText("Name");

        lblDept.setText("Dept");

        tblRegistrar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Object", "ID", "Name", "Department", "Status", "Email", "Phone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRegistrar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(btnSearchbyID, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btnSearchbyName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnSearchbyDept, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDept)
                                .addGap(36, 36, 36)
                                .addComponent(txtFieldDept, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblID)
                                    .addComponent(lblName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFieldName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFieldID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBack))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblTitle)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearchbyID)
                            .addComponent(btnSearchbyName)
                            .addComponent(btnSearchbyDept))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblID))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFieldDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDept))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 62, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEdit)
                            .addComponent(btnDelete))
                        .addGap(13, 13, 13)))
                .addComponent(btnBack)
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchbyIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchbyIDActionPerformed
        // TODO add your handling code here:
        String id = txtFieldID.getText().trim();
        RegistrarDirectory rd = department.getRegistrardirectory();

        List<RegistrarProfile> results;
        if (id.isEmpty()) {
            results = rd.getRegistrarList();
        } else {
            RegistrarProfile rp = rd.findRegistrar(id);
            results = new ArrayList<>();
            if (rp != null) {
                results.add(rp);
            }
        }

        refreshTable(results);
        selectedRegistrar = null;
    }//GEN-LAST:event_btnSearchbyIDActionPerformed

    private void btnSearchbyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchbyNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchbyNameActionPerformed

    private void btnSearchbyDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchbyDeptActionPerformed
        // TODO add your handling code here:
        String dep = txtFieldDept.getText().trim();
    RegistrarDirectory rd = department.getRegistrardirectory();

    java.util.List<RegistrarProfile> results = new java.util.ArrayList<>();
    if (dep.isEmpty()) {
        results = rd.getRegistrarList();
    } else {
        for (RegistrarProfile rp : rd.getRegistrarList()) {
            String rdep = rp.getDepartment();
            if (rdep != null && rdep.equalsIgnoreCase(dep)) {
                results.add(rp);
            }
        }
    }

    refreshTable(results);
    selectedRegistrar = null;
        
    }//GEN-LAST:event_btnSearchbyDeptActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (selectedRegistrar == null) {
            JOptionPane.showMessageDialog(this, "Select a registrar first.");
            return;
        }

        Person p = selectedRegistrar.getPerson();
        String personId = (p != null ? p.getPersonId() : "(unknown)");

        int confirm = JOptionPane.showConfirmDialog(
                this,
                "Delete this registrar (" + personId + ")?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION
        );
        if (confirm != JOptionPane.YES_OPTION) return;

        RegistrarDirectory rd = department.getRegistrardirectory();
        rd.getRegistrarList().remove(selectedRegistrar);

        JOptionPane.showMessageDialog(this, "Registrar deleted.");
        refreshTable(rd.getRegistrarList());
        selectedRegistrar = null;
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (selectedRegistrar == null) {
            JOptionPane.showMessageDialog(this, "Select a registrar first.");
            return;
        }

        Person p = selectedRegistrar.getPerson();
        if (p == null) {
            JOptionPane.showMessageDialog(this, "Missing Person record.");
            return;
        }

        String newDept = JOptionPane.showInputDialog(
                this,
                "New Department:",
                selectedRegistrar.getDepartment()
        );
        if (newDept == null) return;

        String newOffice = JOptionPane.showInputDialog(
                this,
                "New Office Location:",
                selectedRegistrar.getOfficeLocation()
        );
        if (newOffice == null) return;

        String newHours = JOptionPane.showInputDialog(
                this,
                "New Office Hours:",
                selectedRegistrar.getOfficeHours()
        );
        if (newHours == null) return;

        String newEmail = JOptionPane.showInputDialog(
                this,
                "New Email:",
                p.getEmail()
        );
        if (newEmail == null) return;

        String newPhone = JOptionPane.showInputDialog(
                this,
                "New Phone:",
                p.getPhone()
        );
        if (newPhone == null) return;

        
        newEmail = newEmail.trim();
        if (!newEmail.equalsIgnoreCase(p.getEmail())) {
            boolean taken = department.getPersonDirectory().emailExists(newEmail);
            if (taken) {
                JOptionPane.showMessageDialog(this, "Email already in use.");
                return;
            }
        }

        selectedRegistrar.setDepartment(newDept.trim());
        selectedRegistrar.setOfficeLocation(newOffice.trim());
        selectedRegistrar.setOfficeHours(newHours.trim());
        p.setEmail(newEmail.trim());
        p.setPhone(newPhone.trim());

        JOptionPane.showMessageDialog(this, "Registrar updated.");
        refreshTable(department.getRegistrardirectory().getRegistrarList());
        selectedRegistrar = null;
    }//GEN-LAST:event_btnEditActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearchbyDept;
    private javax.swing.JButton btnSearchbyID;
    private javax.swing.JButton btnSearchbyName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDept;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblRegistrar;
    private javax.swing.JTextField txtFieldDept;
    private javax.swing.JTextField txtFieldID;
    private javax.swing.JTextField txtFieldName;
    // End of variables declaration//GEN-END:variables

    private void refreshTable(List<RegistrarProfile> registrarList) {
        DefaultTableModel model = (DefaultTableModel) tblRegistrar.getModel();
        model.setRowCount(0);

        if (registrarList == null) return;

        for (RegistrarProfile rp : registrarList) {
            Person p = rp.getPerson();
            String id    = (p != null ? p.getPersonId()     : "");
            String name  = (p != null ? p.getPersonId()     : ""); 
            // you don't yet store "name" in RegistrarProfile, so for now
            // we just reuse ID or leave blank. If you want a name,
            // add a `String registrarName` field to RegistrarProfile.

            String dept  = rp.getDepartment();
            String office= rp.getOfficeLocation();
            String hours = rp.getOfficeHours();
            String email = (p != null ? p.getEmail()        : "");
            String phone = (p != null ? p.getPhone()        : "");

            Object[] row = new Object[]{
                rp,
                id,
                name,
                dept,
                office,
                hours,
                email,
                phone
            };
            model.addRow(row);
        }
    }
}

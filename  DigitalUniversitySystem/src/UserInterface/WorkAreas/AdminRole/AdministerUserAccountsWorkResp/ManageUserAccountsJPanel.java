/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.WorkAreas.AdminRole.AdministerUserAccountsWorkResp;

import info5100.university.example.Department.Department;
import info5100.university.example.Persona.Person;
import info5100.university.example.Persona.UserAccount;
import info5100.university.example.Persona.UserAccountDirectory;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kal bugrara
 */
public class ManageUserAccountsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuppliersJPanel
     */
    JPanel CardSequencePanel;
    Department department;
    UserAccount selecteduseraccount;

    public ManageUserAccountsJPanel(Department dept, JPanel jp) {
        this.CardSequencePanel = jp;
        this.department = dept;
        initComponents();
        refreshTable();

    }

    private void refreshTable() {

        DefaultTableModel model = (DefaultTableModel) UserAccountTable.getModel();
        model.setRowCount(0);

        UserAccountDirectory uad = department.getUserAccountDirectory();
        for (UserAccount ua : uad.getUserAccountList()) {
            Object[] row = new Object[4];
            row[0] = ua.getUsername();
            row[1] = ua.getRole();
            row[2] = ua.getLastLoginTime(); 
            row[3] = ua.getLastUpdatedTime(); 
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblTitle2 = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserAccountTable = new javax.swing.JTable();
        btnNewAccount = new javax.swing.JButton();
        btnEditAccount = new javax.swing.JButton();
        btnDeleteAccount = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(null);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(30, 400, 80, 23);

        lblTitle2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblTitle2.setText("User Accounts");
        add(lblTitle2);
        lblTitle2.setBounds(30, 90, 190, 17);

        lblTitle.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lblTitle.setText("Manage User Accounts");
        add(lblTitle);
        lblTitle.setBounds(21, 20, 550, 28);

        UserAccountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role", "Last Activity", "Last Updated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UserAccountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                UserAccountTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(UserAccountTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 110, 550, 130);

        btnNewAccount.setText("New Account");
        btnNewAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewAccountActionPerformed(evt);
            }
        });
        add(btnNewAccount);
        btnNewAccount.setBounds(67, 280, 130, 23);

        btnEditAccount.setText("Edit Account");
        btnEditAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAccountActionPerformed(evt);
            }
        });
        add(btnEditAccount);
        btnEditAccount.setBounds(250, 280, 120, 23);

        btnDeleteAccount.setText("Delete Account");
        btnDeleteAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAccountActionPerformed(evt);
            }
        });
        add(btnDeleteAccount);
        btnDeleteAccount.setBounds(410, 280, 130, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void UserAccountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserAccountTableMousePressed
        // Extracts the row (uaser account) in the table that is selected by the user                       
        int selectedrow = UserAccountTable.getSelectedRow();
        if (selectedrow < 0) {
            selecteduseraccount = null;
            return;
        }

        String username = (String) UserAccountTable.getValueAt(selectedrow, 0);
        if (username == null) {
            selecteduseraccount = null;
            return;
        }

        UserAccountDirectory uad = department.getUserAccountDirectory();
        selecteduseraccount = uad.getByUsername(username);
    }//GEN-LAST:event_UserAccountTableMousePressed

    private void btnEditAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAccountActionPerformed
        // TODO add your handling code here:
        if (selecteduseraccount == null) {
            JOptionPane.showMessageDialog(this, "Select an account first.");
            return;
        }

        String currentUsername = selecteduseraccount.getUsername();

        String newPassword = JOptionPane.showInputDialog(
                this,
                "Enter new password (leave blank to keep current):"
        );
        if (newPassword == null) {
            return; // cancel
        }

        String[] roles = new String[]{"ADMIN", "FACULTY", "STUDENT", "REGISTRAR"};
        String newRole = (String) JOptionPane.showInputDialog(
                this,
                "Select new role:",
                "Role",
                JOptionPane.PLAIN_MESSAGE,
                null,
                roles,
                selecteduseraccount.getRole()
        );
        if (newRole == null) {
            return; // cancel
        }

        boolean ok = department.getUserAccountDirectory()
                .updateUserAccount(
                        currentUsername,
                        newPassword.trim(),
                        newRole.trim()
                );

        if (!ok) {
            JOptionPane.showMessageDialog(this, "Update failed.");
            return;
        }

        JOptionPane.showMessageDialog(this, "Account updated.");
        refreshTable();
    }//GEN-LAST:event_btnEditAccountActionPerformed

    private void btnNewAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewAccountActionPerformed
        // TODO add your handling code here:
        String username = JOptionPane.showInputDialog(this, "Enter new username:");
        if (username == null || username.trim().isEmpty()) {
            return;
        }

        String password = JOptionPane.showInputDialog(this, "Enter password:");
        if (password == null || password.trim().isEmpty()) {
            return;
        }

        String[] roles = new String[]{"ADMIN", "FACULTY", "STUDENT", "REGISTRAR"};
        String role = (String) JOptionPane.showInputDialog(
                this,
                "Select role:",
                "Role",
                JOptionPane.PLAIN_MESSAGE,
                null,
                roles,
                "STUDENT"
        );
        if (role == null) {
            return;
        }

        String personId = JOptionPane.showInputDialog(this,
                "Enter University ID to link (e.g. U100123):");
        if (personId == null || personId.trim().isEmpty()) {
            return;
        }

        Person p = department.getPersonDirectory().findPerson(personId.trim());
        if (p == null) {
            JOptionPane.showMessageDialog(this,
                    "No person found with ID " + personId + ".\nUse Register Persons first.");
            return;
        }

        try {
            department.getUserAccountDirectory()
                    .newUserAccount(p, username.trim(), password.trim(), role);
            JOptionPane.showMessageDialog(this, "Account created.");
            refreshTable();
        } catch (IllegalArgumentException dup) {
            JOptionPane.showMessageDialog(this, "Username already exists.");
        }
    }//GEN-LAST:event_btnNewAccountActionPerformed

    private void btnDeleteAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAccountActionPerformed
        // TODO add your handling code here:
        if (selecteduseraccount == null) {
            JOptionPane.showMessageDialog(this, "Select an account first.");
            return;
        }

        String username = selecteduseraccount.getUsername();

        int confirm = JOptionPane.showConfirmDialog(
                this,
                "Delete account '" + username + "'?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION
        );
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        boolean ok = department.getUserAccountDirectory()
                .deleteUserAccount(username);

        if (!ok) {
            JOptionPane.showMessageDialog(this, "Delete failed.");
            return;
        }

        JOptionPane.showMessageDialog(this, "Account deleted.");
        selecteduseraccount = null;
        refreshTable();
    }//GEN-LAST:event_btnDeleteAccountActionPerformed




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable UserAccountTable;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteAccount;
    private javax.swing.JButton btnEditAccount;
    private javax.swing.JButton btnNewAccount;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle2;
    // End of variables declaration//GEN-END:variables

}
